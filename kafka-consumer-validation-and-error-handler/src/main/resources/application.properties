spring.application.name=bcmes


# KAFKA - CONSUMER

# Ao usar esse aqui, ao ocorrer um erro de serialização, como: "This error handler cannot process 'SerializationException's directly ..."
#   fica em looping infinito nos logs, quando nao há um error-handler. Isso ocorre se um dos tipos de dados do objeto recebido for incompativel, etc..
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Com esses 2 aqui abaixo, não fica em log de looping infinito, no caso de erro de serialização, mesmo sem a implementação do error-handler...
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# Para deserializar objetos para os consumers
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Para deserializar objetos é preciso saber o tipo do objeto, se nao vier especificado no header da mensagem a ser consumida, pega esse valor padrao.
spring.kafka.consumer.properties.spring.json.value.default.type=com.bcms.apache.consumer.MyKafkaPayload

# Apenas especifica os pacotes que são considerados confiáveis para desserialização de objetos JSON.
#   Ajuda a prevenir ataques de desserialização maliciosa, aceita uma lista de pacotes separados por vírgulas.
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
