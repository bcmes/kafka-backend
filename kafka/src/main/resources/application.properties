spring.application.name=bcmes


# KAFKA - CONSUMER

# earliest: Todas as mensagens disponíveis desde o início do tópico.
#   Onde não se pode perder nenhuma mensagem, mesmo as que foram produzidas antes do grupo-consumidor ser iniciado.
# latest: o default, Apenas as novas mensagens produzidas após o consumidor começar a ler.
# none: Este valor garante que o consumidor só comece a ler se um offset válido estiver disponível. Isso é útil em
#   cenários onde você quer evitar que o consumidor leia mensagens que ele não deveria, garantindo que ele só leia
#   mensagens a partir de um ponto bem definido.
# Obs.: Se vc subir os consumers com latest, o default, e depois parar a aplicação, e alterar o valor para earliest e
#   subir a aplicação novamente, os grupos que já haviam 'subido' NÃO vão fazer o consumo desde o começo !

spring.kafka.consumer.auto-offset-reset=earliest

# Ao usar esse aqui, ao ocorrer um erro de serialização, como: "This error handler cannot process 'SerializationException's directly ..."
#   fica em looping infinito nos logs. Isso ocorre se um dos tipos de dados do objeto recebido for incompativel, etc..
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Com esses 2 aqui abaixo, não fica em log de looping infinito, no caso de erro de serialização...
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# Para deserializar objetos para os consumers
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Para deserializar objetos é preciso saber o tipo do objeto, se nao vier especificado no header da mensagem a ser consumida, pega esse valor padrao.
spring.kafka.consumer.properties.spring.json.value.default.type=com.bcms.apache.kafka.consumer.MyKafkaPayload

# Apenas especifica os pacotes que são considerados confiáveis para desserialização de objetos JSON.
#   Ajuda a prevenir ataques de desserialização maliciosa, aceita uma lista de pacotes separados por vírgulas.
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

# KAFKA - PRODUCER

# intercepta o record antes de envia-lo ao broker.

#spring.kafka.producer.properties.interceptor.classes=com.bcms.apache.kafka.producer.features.MyProducerInterceptor
