# KAFKA
spring.kafka.enable=true
spring.kafka.topics.my-topic-test=my-topic-test
## Tip.: ip:port do kafka-broker
spring.kafka.bootstrap-servers=localhost:29092

spring.kafka.properties.value.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
## Tip.: ip:port do schema-registry
spring.kafka.properties.schema.registry.url=http://0.0.0.0:8085
spring.kafka.properties.auto.register.schemas=true

spring.kafka.producer.batch-size=65536
spring.kafka.producer.acks=all
spring.kafka.producer.compression-type=lz4
spring.kafka.producer.properties.linger.ms=50
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.client-id=bcmes_local
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

spring.kafka.consumer.client-id=bcmes_local
spring.kafka.consumer.group-id=bcmes_group_local
# Para que os consumers comecem a consumir as mensagens desde o começo
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-serializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-serializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.specific.avro.reader=true